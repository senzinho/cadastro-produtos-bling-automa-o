"""
Script de Migra√ß√£o do Banco de Dados
Execute este script ANTES de rodar o app.py
"""

import pymysql
from datetime import datetime

# Configura√ß√µes do banco - AJUSTE SE NECESS√ÅRIO
DB_CONFIG = {
    'host': 'localhost',
    'user': 'policia',
    'password': 'Saopio22.20305',
    'database': 'controle_acessos',
    'charset': 'utf8mb4'
}

def check_column_exists(cursor, table_name, column_name):
    """Verifica se uma coluna existe na tabela"""
    cursor.execute(f"""
        SELECT COUNT(*) 
        FROM INFORMATION_SCHEMA.COLUMNS 
        WHERE TABLE_SCHEMA = '{DB_CONFIG['database']}' 
        AND TABLE_NAME = '{table_name}' 
        AND COLUMN_NAME = '{column_name}'
    """)
    return cursor.fetchone()[0] > 0

def migrate_database():
    """Executa a migra√ß√£o do banco de dados"""
    try:
        print('='*70)
        print('üîß INICIANDO MIGRA√á√ÉO DO BANCO DE DADOS')
        print('='*70)
        
        # Conecta ao banco
        connection = pymysql.connect(**DB_CONFIG)
        cursor = connection.cursor()
        
        print(f'‚úÖ Conectado ao banco: {DB_CONFIG["database"]}')
        
        # Migra√ß√£o 1: Adicionar email_attempt √† tabela login_history
        if not check_column_exists(cursor, 'login_history', 'email_attempt'):
            print('\nüìù Adicionando coluna email_attempt...')
            cursor.execute("""
                ALTER TABLE login_history 
                ADD COLUMN email_attempt VARCHAR(100) AFTER user_id
            """)
            connection.commit()
            print('‚úÖ Coluna email_attempt adicionada!')
        else:
            print('\n‚úì Coluna email_attempt j√° existe')
        
        # Migra√ß√£o 2: Adicionar user_agent √† tabela login_history
        if not check_column_exists(cursor, 'login_history', 'user_agent'):
            print('\nüìù Adicionando coluna user_agent...')
            cursor.execute("""
                ALTER TABLE login_history 
                ADD COLUMN user_agent VARCHAR(255) AFTER ip_address
            """)
            connection.commit()
            print('‚úÖ Coluna user_agent adicionada!')
        else:
            print('\n‚úì Coluna user_agent j√° existe')
        
        # Verifica a estrutura final
        print('\nüìä Estrutura da tabela login_history:')
        cursor.execute("DESCRIBE login_history")
        columns = cursor.fetchall()
        for col in columns:
            print(f'   ‚Ä¢ {col[0]} ({col[1]})')
        
        # Mostra algumas entradas
        print('\nüìã √öltimas entradas no hist√≥rico de login:')
        cursor.execute("""
            SELECT id, user_id, email_attempt, success, created_at 
            FROM login_history 
            ORDER BY created_at DESC 
            LIMIT 5
        """)
        entries = cursor.fetchall()
        
        if entries:
            for entry in entries:
                print(f'   ‚Ä¢ ID: {entry[0]}, User: {entry[1]}, Email: {entry[2]}, Sucesso: {entry[3]}, Data: {entry[4]}')
        else:
            print('   (Nenhuma entrada encontrada)')
        
        cursor.close()
        connection.close()
        
        print('\n' + '='*70)
        print('‚úÖ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!')
        print('='*70)
        print('üí° Agora voc√™ pode executar o app.py normalmente')
        print('='*70 + '\n')
        
        return True
        
    except pymysql.Error as e:
        print(f'\n‚ùå Erro na migra√ß√£o: {e}')
        return False
    except Exception as e:
        print(f'\n‚ùå Erro inesperado: {e}')
        return False

if __name__ == '__main__':
    success = migrate_database()
    
    if not success:
        print('\n‚ö†Ô∏è  A migra√ß√£o falhou. Verifique:')
        print('   1. O MySQL est√° rodando?')
        print('   2. As credenciais est√£o corretas?')
        print('   3. O banco "controle_acessos" existe?')
        print('\nüí° Voc√™ tamb√©m pode executar o script SQL manualmente.')
        exit(1)
    
    exit(0)